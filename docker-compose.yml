version: '3'
networks:

  albert_network:
    driver: bridge

  tommy_network:
    driver: bridge

  dakota_network:
    driver: bridge

  tifany_network:
    driver: bridge

  cloud_network:
    driver: bridge

  server_network:
    driver: bridge


services:

  # ------ ðŸ¦Ÿ Mosquitto Brokers ðŸ¦Ÿ ------

  mosquitto_albert:
    image: eclipse-mosquitto
    container_name: mosquitto_albert
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto_config/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - albert_network

  mosquitto_tommy:
    image: eclipse-mosquitto
    container_name: mosquitto_tommy
    ports:
      - "1884:1883"
    volumes:
      - ./mosquitto_config/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - tommy_network

  mosquitto_dakota:
    image: eclipse-mosquitto
    container_name: mosquitto_dakota
    ports:
      - "1885:1883"
    volumes:
      - ./mosquitto_config/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - dakota_network

  mosquitto_tifany:
    image: eclipse-mosquitto
    container_name: mosquitto_tifany
    ports:
      - "1886:1883"
    volumes:
      - ./mosquitto_config/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - tifany_network

    # ------- Cloud Mosquitto Broker -------

  # ------- Cloud Mosquitto Broker -------
  cloud_mosquitto:
    image: eclipse-mosquitto
    container_name: cloud_mosquitto
    ports:
      - "1887:1883"
    volumes:
      - ./mosquitto_config/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - cloud_network
      - albert_network
      - tommy_network
      - dakota_network
      - tifany_network
      - server_network

  # ------- User: ALBERT Id: 1234 -------

  temperature_sensor_albert:
    build:
      context: ./
      dockerfile: ./simulators/temperature_sensor/Dockerfile
    container_name: temperature_sensor_albert
    environment:
      - MQTT_BROKER=mosquitto_albert
      - USER_ID=1234
    depends_on:
      - mosquitto_albert
    networks:
      - albert_network

  presence_sensor_albert:
    build:
      context: ./
      dockerfile: ./simulators/presence_sensor/Dockerfile
    container_name: presence_sensor_albert
    environment:
      - MQTT_BROKER=mosquitto_albert
      - USER_ID=1234
    depends_on:
      - mosquitto_albert
    networks:
      - albert_network

  gateway_albert:
    build:
      context: ./gateways
    container_name: gateway_albert
    environment:
      - MQTT_BROKER=mosquitto_albert
      - CLOUD_MQTT_BROKER=cloud_mosquitto
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=sensor_data
      - USER_ID=1234
    depends_on:
      mosquitto_albert:
        condition: service_started
      kafka:
        condition: service_healthy
      temperature_sensor_albert:
        condition: service_started
      presence_sensor_albert:
        condition: service_started
    networks:
      - albert_network
      - cloud_network

  # ------- User: TOMMY Id: 1235 -------

  temperature_sensor_tommy:
    build:
      context: ./
      dockerfile: ./simulators/temperature_sensor/Dockerfile
    container_name: temperature_sensor_tommy
    environment:
      - MQTT_BROKER=mosquitto_tommy
      - USER_ID=1235
    depends_on:
      - mosquitto_tommy
    networks:
      - tommy_network

  presence_sensor_tommy:
    build:
      context: ./
      dockerfile: ./simulators/presence_sensor/Dockerfile
    container_name: presence_sensor_tommy
    environment:
      - MQTT_BROKER=mosquitto_tommy
      - USER_ID=1235
    depends_on:
      - mosquitto_tommy
    networks:
      - tommy_network

  gateway_tommy:
    build:
      context: ./gateways
    container_name: gateway_tommy
    environment:
      - MQTT_BROKER=mosquitto_tommy
      - CLOUD_MQTT_BROKER=cloud_mosquitto
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=sensor_data
      - USER_ID=1235
    depends_on:
      mosquitto_tommy:
        condition: service_started
      kafka:
        condition: service_healthy
      temperature_sensor_tommy:
        condition: service_started
      presence_sensor_tommy:
        condition: service_started
    networks:
      - tommy_network
      - cloud_network

  # ------- User: DAKOTA Id: 1236 -------

  temperature_sensor_dakota:
    build:
      context: ./
      dockerfile: ./simulators/temperature_sensor/Dockerfile
    container_name: temperature_sensor_dakota
    environment:
      - MQTT_BROKER=mosquitto_dakota
      - USER_ID=1236
    depends_on:
      - mosquitto_dakota
    networks:
      - dakota_network

  presence_sensor_dakota:
    build:
      context: ./
      dockerfile: ./simulators/presence_sensor/Dockerfile
    container_name: presence_sensor_dakota
    environment:
      - MQTT_BROKER=mosquitto_dakota
      - USER_ID=1236
    depends_on:
      - mosquitto_dakota
    networks:
      - dakota_network

  gateway_dakota:
    build:
      context: ./gateways
    container_name: gateway_dakota
    environment:
      - MQTT_BROKER=mosquitto_dakota
      - CLOUD_MQTT_BROKER=cloud_mosquitto
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=sensor_data
      - USER_ID=1236
    depends_on:
      mosquitto_dakota:
        condition: service_started
      kafka:
        condition: service_healthy
      temperature_sensor_dakota:
        condition: service_started
      presence_sensor_dakota:
        condition: service_started
    networks:
      - dakota_network
      - cloud_network

  # ------- User: TIFANY Id: 1237 -------

  temperature_sensor_tifany:
    build:
      context: ./
      dockerfile: ./simulators/temperature_sensor/Dockerfile
    container_name: temperature_sensor_tifany
    environment:
      - MQTT_BROKER=mosquitto_tifany
      - USER_ID=1237
    depends_on:
      - mosquitto_tifany
    networks:
      - tifany_network

  presence_sensor_tifany:
    build:
      context: ./
      dockerfile: ./simulators/presence_sensor/Dockerfile
    container_name: presence_sensor_tifany
    environment:
      - MQTT_BROKER=mosquitto_tifany
      - USER_ID=1237
    depends_on:
      - mosquitto_tifany
    networks:
      - tifany_network

  gateway_tifany:
    build:
      context: ./gateways
    container_name: gateway_tifany
    environment:
      - MQTT_BROKER=mosquitto_tifany
      - CLOUD_MQTT_BROKER=cloud_mosquitto
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=sensor_data
      - USER_ID=1237
    depends_on:
      mosquitto_tifany:
        condition: service_started
      kafka:
        condition: service_healthy
      temperature_sensor_tifany:
        condition: service_started
      presence_sensor_tifany:
        condition: service_started
    networks:
      - tifany_network
      - cloud_network
      - server_network

  # ------- InfluxDB -------

  influxdb:
    image: influxdb:2.4.0
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=project_1
      - DOCKER_INFLUXDB_INIT_PASSWORD=supersecretpassword
      - DOCKER_INFLUXDB_INIT_ORG=UDL
      - DOCKER_INFLUXDB_INIT_BUCKET=data
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=supersecrettoken
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8086/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - server_network
      - cloud_network


  # ------- Cloud Ingestor -------

  cloud_ingestor:
    build:
      context: ./cloud_ingestor
    container_name: cloud_ingestor
    environment:
      - CLOUD_MQTT_BROKER=cloud_mosquitto
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=sensor_data
    depends_on:
      cloud_mosquitto:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - cloud_network
      - server_network

  # ------- Clean Service -------

  clean_service:
    build:
      context: ./cloud_microservices/clean_service
      dockerfile: Dockerfile
    container_name: clean_service
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPICS=sensor_data_clean,sensor_data
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - server_network


 # ------- Save Service -------
  save_service:
    build:
      context: ./cloud_microservices/save_service
      dockerfile: Dockerfile
    container_name: save_service
    environment:
      - KAFKA_BROKER=kafka:9092
      - CLEAN_KAFKA_TOPIC=sensor_data_clean
      - INFLUXDB_HOST=influxdb
      - INFLUXDB_DATABASE=sensor_data
      - INFLUXDB_ORG=UDL
      - INFLUXDB_TOKEN=supersecrettoken
      - INFLUXDB_BUCKET=data
    depends_on:
      kafka:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    networks:
      - server_network

  # ------- Actuate Service -------

  actuate_service:
    build:
      context: ./cloud_microservices/actuate_service
    container_name: actuate_service
    environment:
      - KAFKA_BROKER=kafka:9092
      - CLEAN_KAFKA_TOPIC=sensor_data_clean
      - CLOUD_MQTT_BROKER=cloud_mosquitto
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - cloud_network
      - server_network

  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    healthcheck:
      test: kafka-topics.sh -list --bootstrap-server kafka:9092
      interval: 1s
      timeout: 10s
      retries: 5
    networks:
      - server_network

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - server_network